# Generated by Django 3.1.1 on 2020-09-07 03:58

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category of a product. Eg: Cake, Biscuits etc.', max_length=255, unique=True)),
                ('unit', models.CharField(choices=[('lb', 'pound'), ('gm', 'grams'), ('kg', 'kilogram'), ('pcs', 'piece')], default='kg', help_text='Unit of measurement', max_length=255)),
                ('description', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the customer', max_length=255, verbose_name='Name')),
                ('phone_number', models.CharField(blank=True, max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.CharField(blank=True, default=None, help_text='Address of Customer', max_length=255, null=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, help_text='Name of City to which customer belongs', max_length=255)),
                ('email_id', models.EmailField(blank=True, max_length=254, null=True)),
                ('date', models.DateField(auto_now_add=True, help_text='Date when customer was added', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Thing you use to create your product', max_length=255, unique=True)),
                ('unit', models.CharField(choices=[('g', 'gram'), ('ltr', 'liter'), ('kg', 'kilogram'), ('pc', 'pieces'), ('tbsp', 'table spoon'), ('tsp', 'tea spoon')], default='g', help_text='unit of measurement of this quantity', max_length=255)),
                ('unit_cost', models.FloatField(verbose_name='Cost Price per unit')),
            ],
        ),
        migrations.CreateModel(
            name='OverheadItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Eg: Electricity, Labour, Packaging etc.', max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of Item', max_length=255, unique=True)),
                ('profit_percent', models.IntegerField(default=0, help_text='profit in % that you want from this product')),
                ('cost_price', models.FloatField(blank=True, help_text='This is calculated using ingredients and overheads of your product. This is cost price per unit.', null=True)),
                ('selling_price', models.FloatField(default=0.0, help_text='Calculated as per profit')),
                ('note', models.CharField(blank=True, help_text='Note for self about product', max_length=1000, null=True)),
                ('category', models.ForeignKey(help_text='Category of this product item', on_delete=django.db.models.deletion.CASCADE, to='inventory.category')),
                ('ingredient', models.ManyToManyField(to='inventory.Ingredient')),
                ('overhead', models.ManyToManyField(to='inventory.OverheadItem')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_status', models.BooleanField(help_text='Is the order delivered?')),
                ('payment_status', models.BooleanField(help_text='Is the payment received from customer?')),
                ('Datetime', models.DateTimeField(default=datetime.datetime(2020, 9, 7, 3, 58, 58, 910071), help_text='Date and time when order was placed', null=True)),
                ('total_price', models.FloatField(default=0.0, null=True, verbose_name='Total Amount')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('note_from_customer', models.CharField(blank=True, help_text='Note from customers', max_length=255, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.customer')),
                ('product', models.ManyToManyField(to='inventory.Product')),
            ],
        ),
    ]
